// Test generated by RoostGPT for test java-unit-test-bhavya using AI Type Open AI and AI Model gpt-4

package org.killbill.billing.account.api;

import org.testng.annotations.Test;
import org.mockito.Mockito;
import java.util.UUID;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.killbill.billing.catalog.api.Currency;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotNull;

public class DefaultMutableAccountData_DefaultMutableAccountData_66db1f8bbe_Test {

    @Test
    public void testDefaultMutableAccountData() {
        AccountData accountData = Mockito.mock(AccountData.class);

        Mockito.when(accountData.getExternalKey()).thenReturn("testKey");
        Mockito.when(accountData.getEmail()).thenReturn("testEmail");
        Mockito.when(accountData.getName()).thenReturn("testName");
        Mockito.when(accountData.getFirstNameLength()).thenReturn(4);
        Mockito.when(accountData.getCurrency()).thenReturn(Currency.USD);
        Mockito.when(accountData.getParentAccountId()).thenReturn(UUID.randomUUID());
        Mockito.when(accountData.isPaymentDelegatedToParent()).thenReturn(false);
        Mockito.when(accountData.getBillCycleDayLocal()).thenReturn(1);
        Mockito.when(accountData.getPaymentMethodId()).thenReturn(UUID.randomUUID());
        Mockito.when(accountData.getReferenceTime()).thenReturn(new DateTime(DateTimeZone.UTC));
        Mockito.when(accountData.getTimeZone()).thenReturn(DateTimeZone.UTC);
        Mockito.when(accountData.getLocale()).thenReturn("en_US");
        Mockito.when(accountData.getAddress1()).thenReturn("testAddress1");
        Mockito.when(accountData.getAddress2()).thenReturn("testAddress2");
        Mockito.when(accountData.getCompanyName()).thenReturn("testCompany");
        Mockito.when(accountData.getCity()).thenReturn("testCity");
        Mockito.when(accountData.getStateOrProvince()).thenReturn("testState");
        Mockito.when(accountData.getCountry()).thenReturn("testCountry");
        Mockito.when(accountData.getPostalCode()).thenReturn("testPostalCode");
        Mockito.when(accountData.getPhone()).thenReturn("testPhone");
        Mockito.when(accountData.getNotes()).thenReturn("testNotes");
        Mockito.when(accountData.isMigrated()).thenReturn(false);

        DefaultMutableAccountData defaultMutableAccountData = new DefaultMutableAccountData(accountData);

        assertEquals(defaultMutableAccountData.getExternalKey(), "testKey");
        assertEquals(defaultMutableAccountData.getEmail(), "testEmail");
        assertEquals(defaultMutableAccountData.getName(), "testName");
        assertEquals(defaultMutableAccountData.getFirstNameLength(), 4);
        assertEquals(defaultMutableAccountData.getCurrency(), Currency.USD);
        assertNotNull(defaultMutableAccountData.getParentAccountId());
        assertEquals(defaultMutableAccountData.isPaymentDelegatedToParent(), false);
        assertEquals(defaultMutableAccountData.getBillCycleDayLocal(), 1);
        assertNotNull(defaultMutableAccountData.getPaymentMethodId());
        assertNotNull(defaultMutableAccountData.getReferenceTime());
        assertEquals(defaultMutableAccountData.getTimeZone(), DateTimeZone.UTC);
        assertEquals(defaultMutableAccountData.getLocale(), "en_US");
        assertEquals(defaultMutableAccountData.getAddress1(), "testAddress1");
        assertEquals(defaultMutableAccountData.getAddress2(), "testAddress2");
        assertEquals(defaultMutableAccountData.getCompanyName(), "testCompany");
        assertEquals(defaultMutableAccountData.getCity(), "testCity");
        assertEquals(defaultMutableAccountData.getStateOrProvince(), "testState");
        assertEquals(defaultMutableAccountData.getCountry(), "testCountry");
        assertEquals(defaultMutableAccountData.getPostalCode(), "testPostalCode");
        assertEquals(defaultMutableAccountData.getPhone(), "testPhone");
        assertEquals(defaultMutableAccountData.getNotes(), "testNotes");
        assertEquals(defaultMutableAccountData.isMigrated(), false);
    }
}
