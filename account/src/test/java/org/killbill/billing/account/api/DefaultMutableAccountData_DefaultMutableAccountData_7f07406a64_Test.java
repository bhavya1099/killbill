// Test generated by RoostGPT for test java-unit-test-bhavya using AI Type Open AI and AI Model gpt-4

package org.killbill.billing.account.api;

import java.util.UUID;

import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.killbill.billing.catalog.api.Currency;
import org.mockito.Mockito;
import org.testng.Assert;
import org.testng.annotations.Test;

public class DefaultMutableAccountData_DefaultMutableAccountData_7f07406a64_Test {

    @Test
    public void testDefaultMutableAccountData() {
        String externalKey = "123";
        String email = "test@example.com";
        String name = "John Doe";
        int firstNameLength = 4;
        Currency currency = Mockito.mock(Currency.class);
        UUID parentAccountId = UUID.randomUUID();
        Boolean isPaymentDelegatedToParent = true;
        int billCycleDayLocal = 1;
        UUID paymentMethodId = UUID.randomUUID();
        DateTime referenceTime = DateTime.now();
        DateTimeZone timeZone = DateTimeZone.UTC;
        String locale = "en_US";
        String address1 = "123 Main St";
        String address2 = "Apt 4B";
        String companyName = "Test Company";
        String city = "Test City";
        String stateOrProvince = "Test State";
        String country = "Test Country";
        String postalCode = "12345";
        String phone = "123-456-7890";
        String notes = "Test Notes";
        boolean isMigrated = true;

        DefaultMutableAccountData accountData = new DefaultMutableAccountData(externalKey, email, name, firstNameLength, currency, parentAccountId, isPaymentDelegatedToParent, billCycleDayLocal, paymentMethodId, referenceTime, timeZone, locale, address1, address2, companyName, city, stateOrProvince, country, postalCode, phone, notes, isMigrated);

        Assert.assertEquals(accountData.getExternalKey(), externalKey);
        Assert.assertEquals(accountData.getEmail(), email);
        Assert.assertEquals(accountData.getName(), name);
        Assert.assertEquals(accountData.getFirstNameLength(), firstNameLength);
        Assert.assertEquals(accountData.getCurrency(), currency);
        Assert.assertEquals(accountData.getParentAccountId(), parentAccountId);
        Assert.assertEquals(accountData.getIsPaymentDelegatedToParent(), isPaymentDelegatedToParent);
        Assert.assertEquals(accountData.getBillCycleDayLocal(), billCycleDayLocal);
        Assert.assertEquals(accountData.getPaymentMethodId(), paymentMethodId);
        Assert.assertEquals(accountData.getReferenceTime(), referenceTime);
        Assert.assertEquals(accountData.getTimeZone(), timeZone);
        Assert.assertEquals(accountData.getLocale(), locale);
        Assert.assertEquals(accountData.getAddress1(), address1);
        Assert.assertEquals(accountData.getAddress2(), address2);
        Assert.assertEquals(accountData.getCompanyName(), companyName);
        Assert.assertEquals(accountData.getCity(), city);
        Assert.assertEquals(accountData.getStateOrProvince(), stateOrProvince);
        Assert.assertEquals(accountData.getCountry(), country);
        Assert.assertEquals(accountData.getPostalCode(), postalCode);
        Assert.assertEquals(accountData.getPhone(), phone);
        Assert.assertEquals(accountData.getNotes(), notes);
        Assert.assertEquals(accountData.getIsMigrated(), isMigrated);
    }

    @Test
    public void testDefaultMutableAccountData_NullValues() {
        DefaultMutableAccountData accountData = new DefaultMutableAccountData(null, null, null, 0, null, null, null, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, false);
        Assert.assertNull(accountData.getExternalKey());
        Assert.assertNull(accountData.getEmail());
        Assert.assertNull(accountData.getName());
        Assert.assertEquals(accountData.getFirstNameLength(), 0);
        Assert.assertNull(accountData.getCurrency());
        Assert.assertNull(accountData.getParentAccountId());
        Assert.assertNull(accountData.getIsPaymentDelegatedToParent());
        Assert.assertEquals(accountData.getBillCycleDayLocal(), 0);
        Assert.assertNull(accountData.getPaymentMethodId());
        Assert.assertNull(accountData.getReferenceTime());
        Assert.assertNull(accountData.getTimeZone());
        Assert.assertNull(accountData.getLocale());
        Assert.assertNull(accountData.getAddress1());
        Assert.assertNull(accountData.getAddress2());
        Assert.assertNull(accountData.getCompanyName());
        Assert.assertNull(accountData.getCity());
        Assert.assertNull(accountData.getStateOrProvince());
        Assert.assertNull(accountData.getCountry());
        Assert.assertNull(accountData.getPostalCode());
        Assert.assertNull(accountData.getPhone());
        Assert.assertNull(accountData.getNotes());
        Assert.assertFalse(accountData.getIsMigrated());
    }
}
